<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd 
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd"
       default-lazy-init="true">

    <description>Spring公共配置</description>

    <!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
    <context:component-scan base-package="com.qiaobei.hmp">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- Jpa Entity Manager 配置 -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
        <property name="packagesToScan" value="com.qiaobei.hmp"/>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
                <prop key="net.sf.ehcache.configurationResourceName">cache/ehcache-hibernate-local.xml</prop>
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
            </props>
        </property>
    </bean>

    <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="databasePlatform">
            <bean factory-method="getDialect" class="org.springside.modules.persistence.Hibernates">
                <constructor-arg ref="dataSource"/>
            </bean>
        </property>
        <property name="showSql" value="${jpa.showSql}"/>
        <property name="generateDdl" value="${jpa.generateDdl}"/>
    </bean>

    <bean id="fileUtilsServer" class="com.qiaobei.hmp.modules.support.FileUtilsServer">
        <property name="fileSavePath" value="d:\23"/>
    </bean>

    <!-- Spring Data Jpa配置, 扫描base-package下所有继承于Repository<T,ID>的接口 -->
    <jpa:repositories base-package="com.qiaobei.hmp" transaction-manager-ref="transactionManager"
                      entity-manager-factory-ref="entityManagerFactory"/>

    <!-- 事务管理器配置, Jpa单数据源事务 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <!-- 定义aspectj -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- hibernate validator -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>

    <!-- 配置druid监控spring jdbc -->
    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>

    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>com.qiaobei.hmp.service.*</value>
                <value>com.qiaobei.hmp.dao.*</value>
            </list>
        </property>
    </bean>
    <bean id="webSocket" class="com.qiaobei.hmp.modules.webSocket.WebSocketHandlerImpl"/>

    <websocket:handlers allowed-origins="*">
        <websocket:mapping path="/wx/webSocket" handler="webSocket"/>
        <websocket:handshake-interceptors>
            <bean class="com.qiaobei.hmp.modules.webSocket.HandshakeInterceptor"/>
        </websocket:handshake-interceptors>
    </websocket:handlers>

    <aop:config proxy-target-class="true">
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>
    </aop:config>

    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <!--慢SQL记录  执行时间超过10000的就是慢sql-->
        <property name="slowSqlMillis" value="10000"/>
        <property name="logSlowSql" value="true"/>
        <property name="mergeSql" value="true"/>
    </bean>

    <!--  监控 ...然并卵的功能 所以注释掉了 -->
    <!--<bean id="monitoringInterceptor" class="org.javasimon.spring.MonitoringInterceptor"/>-->

    <!--<aop:config>-->
    <!--&lt;!&ndash; name of the class or interface &ndash;&gt;-->
    <!--<aop:pointcut id="monitoringPointcut" expression="execution(* com.qiaobei.hmp.*.*(..))"/>-->
    <!--<aop:advisor advice-ref="monitoringInterceptor" pointcut-ref="monitoringPointcut"/>-->
    <!--</aop:config>-->

    <!-- production环境 -->
    <beans profile="production">
        <context:property-placeholder ignore-resource-not-found="true" location="classpath*:/application.properties"/>

        <!-- 数据源配置,使用应用内的Tomcat JDBC连接池 -->
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
            <property name="url" value="${jdbc.url}"/>
            <property name="username" value="${jdbc.username}"/>
            <property name="password" value="${jdbc.password}"/>
            <!--
                属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
                监控统计用的filter:stat
                日志用的filter:log4j
                防御sql注入的filter:wall
            -->
            <property name="filters" value="stat"/>
            <property name="proxyFilters">
                <list>
                    <ref bean="stat-filter"/>
                </list>
            </property>
            <!--最大活动连接:连接池在同一时间能够分配的最大活动连接的数量-->
            <property name="maxActive" value="60"/>
            <!--初始化连接:连接池启动时创建的初始化连接数量-->
            <property name="initialSize" value="10"/>
            <!--maxWait: 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒-->
            <property name="maxWait" value="2000"/>
            <!--minIdle: 最小空闲连接-->
            <property name="minIdle" value="4"/>
            <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->
            <property name="timeBetweenEvictionRunsMillis" value="60000"/>
            <!--连接在池中保持空闲而不被空闲连接回收器线程 (如果有)回收的最小时间值，单位毫秒-->
            <property name="minEvictableIdleTimeMillis" value="300000"/>

            <!--SQL查询,用来验证从连接池取出的连接,在将连接返回给调用者之前.如果指定,-->
            <!--则查询必须是一个SQL SELECT并且必须返回至少一行记录-->
            <property name="validationQuery" value="SELECT 'x'"/>

            <!--指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败, 则连接将被从池中去除.-->
            <!--注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串-->
            <property name="testWhileIdle" value="true"/>

            <!--指明是否在从池中取出连接前进行检验,如果检验失败, 则从池中去除连接并尝试取出另一个.-->
            <!--注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串-->
            <property name="testOnBorrow" value="false"/>

            <!--指明是否在归还到池中前进行检验-->
            <!--注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串-->
            <property name="testOnReturn" value="false"/>
            <!--表明是否开启statement cache，默认为false，也就是不开启-->
            <property name="poolPreparedStatements" value="true"/>
            <!--statement cache的大小，默认为-1，也就是不限制-->
            <property name="maxOpenPreparedStatements" value="20"/>
            <!-- mysql连接超过时间限制是否回收 -->
            <property name="removeAbandoned" value="true"/>
            <!-- 超时时间；单位为秒。180秒=30分钟 -->
            <property name="removeAbandonedTimeout" value="1800"/>
            <!-- 关闭abanded连接时输出错误日志 -->
            <property name="logAbandoned" value="true"/>

        </bean>

    </beans>

    <!-- local development环境 -->
    <!--<beans profile="development">-->
    <!--<context:property-placeholder ignore-resource-not-found="true"-->
    <!--location="classpath*:/application.properties,-->
    <!--classpath*:/application.development.properties" />-->

    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
    <!--<property name="url" value="${jdbc.url}" />-->
    <!--<property name="username" value="${jdbc.username}" />-->
    <!--<property name="password" value="${jdbc.password}" />-->
    <!--<property name="filters" value="stat" />-->
    <!--<property name="maxActive" value="8" />-->
    <!--<property name="initialSize" value="2" />-->
    <!--<property name="maxWait" value="30" />-->
    <!--<property name="minIdle" value="4" />-->
    <!--<property name="timeBetweenEvictionRunsMillis" value="60000" />-->
    <!--<property name="minEvictableIdleTimeMillis" value="300000" />-->
    <!--<property name="validationQuery" value="SELECT 'x'" />-->
    <!--<property name="testWhileIdle" value="true" />-->
    <!--<property name="testOnBorrow" value="false" />-->
    <!--<property name="testOnReturn" value="false" />-->
    <!--<property name="maxOpenPreparedStatements" value="20" />-->
    <!--<property name="removeAbandoned" value="true" /> &lt;!&ndash; 打开removeAbandoned功能 &ndash;&gt;-->
    <!--<property name="removeAbandonedTimeout" value="1800" /> &lt;!&ndash; 1800秒，也就是30分钟 &ndash;&gt;-->
    <!--<property name="logAbandoned" value="true" /> &lt;!&ndash; 关闭abanded连接时输出错误日志 &ndash;&gt;-->
    <!--</bean>-->

    <!--</beans>-->
</beans>